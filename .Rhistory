debugSource('~/corr1.R')
cr <- corr(directory)
source('~/corr1.R')
cr <- corr(directory)
source('~/corr1.R')
cr <- corr(directory)
length(cr)
cr <- corr(directory, 150)
head(cr)
summary(cr)
cr <- corr(directory, 400)
head(cr)
summary(cr)
cr <- corr(directory, 5000)
cr <- corr(directory, 400)
cr <- corr(directory, 5000)
debugSource('~/corr1.R')
debugSource('~/corr1.R')
cr <- corr(directory, 5000)
dims
debugSource('~/corr1.R')
cr <- corr(directory, 5000)
dims
summary(cr)
debugSource('~/corr1.R')
cr <- corr(directory, 5000)
cr
summary(cr)
source('~/corr1.R')
cr <- corr(directory)
head(cr)
summar(cr)
summary(cr)
cr
directory <- "/Users/mehyvari/specdata"
source('~/corr1.R')
cr <- corr(directory)
head(cr)
source('~/corr1.R')
cr <- corr(directory)
head(cr)
?head
debugSource('~/corr1.R')
cr <- corr(directory)
valpair
aux1
aux
length(bool)
dim(valpair)
dim(correlous)
correlous
source('~/corr1.R')
source('~/corr1.R')
cr <- corr(directory)
head(cr)
source('~/corr1.R')
cr <- corr(directory)
source('~/corr1.R')
cr <- corr(directory)
head(Cr)
head(cr)
length(cr)
cr <- sort(cr)
set.seed(868)
out <- round(cr[sample(length(cr), 5)], 4)
print(out)
cr <- corr(directory, 129)
cr <- sort(cr)
n <- length(Cr)
n <- length(cr)
set.seed(197)
out <- c(n, round(cr[sample(n, 5)], 4))
print(out)
cr <- corr(directory, 2000)
source('~/corr1.R')
cr <- corr(directory, 2000)
n <- length(cr)
cr <- corr(directory, 1000)
cr <- sort(cr)
cr <- sort(cr)
print(c(n, round(cr, 4)))
source('~/pollutantmean.R')
pollutantmean(directory, "nitrate", 70:72)
pollutantmean(directory, "nitrate")
pollutantmean(directory, "sulfate", 34)
source('~/complete.R')
cc <- complete(directory, c(6, 10, 20, 34, 100, 200, 310))
print(cc$nobs)
cc <- complete(directory, 54)
print(cc$nobs)
set.seed(42)
cc <- complete(directory, 332:1)
use <- sample(332, 10)
print(cc[use, "nobs"])
X <- list(a = 1:5, b = rnorm(10))
$a
lapply(X, mean)
X <- 1:4
lapply(X, runif)
?runif
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x
max(x)
?apply
x <- rnorm(10)
x
log(-1)
swirl()
swirl
?swirl
??swirl
install.packages("swirl")
library(swirl)
install_from_swirl("R Programming")
swirl()
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
csl_list
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(csl_vect)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(sahpe_mat)
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(unique_vals, unique)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, uniquem numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
library(datasets)
data(iris)
?iris
iris
x <- tapply(iris$Sepal.Length, iris$virginica)
virginica <- iris$virginica
virginica
?apply
?lapply
swirl
swirl()
head flags
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
cls_list <- sapply(flags, class)
cls_vect < sapply(flags, calss)
cls_vect < sapply(flags, class)
cls_vect < sapply(flags, class)
cls_vect < sapply(flags, class)
0
exit
source('~/Test_foo.R')
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
makeVectro(x)
makeVector(x)
cachemean(x)
y <- c(5, 6, 7, 8, 9, 10, 11, 12, 13)
cachemean(x, y)
debugSource('~/Test_foo.R')
makeVector(x)
get
makeVector(y)
get
setmean
getmean
list()
list
debugSource('~/Test_foo.R')
list
cachemean(x, list)
class(list)
makeVector
makeVector()
m
makeVector(x)
x
class(numeric())
?numeric
x <- numeric(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
z <- as.numeric(x)
z
makeVector(z)
list
source('~/Test_foo.R')
cachemean(makeVector(x))
cachemean(makeVector(x), y)
cachemean(makeVector(x))
y
cachemean(makeVector(x), makeVector(y))
cachemean(makeVector(x), 4
cachemean(makeVector(x), 4
cachemean(makeVector(x), 4)
cachemean(makeVector(c(x, 4))
<
§
cachemean(makeVector(c(x), as.numeric(1))
<s
§
cachemean(makeVector(c(x), "zoo")
§
cachemean(makeVector(c(x), "zoo")
§
cachemean(makeVector(c(x))
§
cachemean(makeVector(x))
x$getmean
m
data
cachemean(makeVector(x))
get
getmean
m
x$setmean(data, ...)
x$setmean(m)
t <- x$setmean(m)
t
setmean
list
a <- list
a
list[1]
list[[1]
§
list[[1]]
cachemean(cachemean(x))
cachemean(makeVeactor(x))
x <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
cachemean(makeVeactor(x))
source('~/Test_foo.R')
cachemean(makeVeactor(x))
cachemean(makeVector(x))
cachemean(makeVector(y))
cachemean(makeVector(<))
cachemean(makeVector(z))
debugSource('~/Test_foo.R')
cachemean(makeVector(y))
set
makeVector(y)
setmean
list
list[1]
list[[1]
list[1]
list[[1]]
list{1}
list(1)
list(2)
makeVector(x)
get
m
cachemean(makeVector(x))
?list
c <- makeVector(x)
is.list(c)
c
m
cachemean(makeVector(x), makeVector(y))
?mean
cachemean(makeVector(x), 0.5)
setmean <- function(mean) x
setmean
d <- setmean(x)
d
d <- cachemean(makeVector(x), 0.5)
d
d[1]
d[2]
length(d)
mean
d <- cachemean(makeVector(x), 0.5)
m
a <- x$setmean(m)
a
d <- cachemean(makeVector(x), 0.5)
m
d <- cachemean(makeVector(y), 0.5)
y <- c(5, 6, 7, 8, 9, 10, 11, 12, 13, 14)
d <- cachemean(makeVector(y), 0.5)
m
x
c <- makeVector(c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
cachemean(c)
makeVector()
z <- makeVector()
cachemean(z)
m <- c(4, 3, 2, 1)
z <- makeVector()
cachemean(z)
s <- x$getmean
y <- c(5, 5, 5, 5, 5)
makeVector(y)
e <- makeVector(y)
a <- e$getmean()
a
a <- e$setmean()
a <- e$setmean(y)
a
c <- rnorm(12)
c
c <- rnorm(9)
d <- matrix(rnorm(9), 3, 3)
d
r <- solve(d)
r
setwd("~/assignment2/ProgrammingAssignment2")
wd
?solve
q <- cacheSolve(makeCacheMatrix(d))
source('~/assignment2/ProgrammingAssignment2/cachematrix.R')
q <- cacheSolve(makeCacheMatrix(d))
q
r
g <- cacheSolve()
g <- cacheSolve(makeCacheMatrix())
debugSource('~/assignment2/ProgrammingAssignment2/cachematrix.R')
q <- cacheSolve(makeCacheMatrix(d))
a <- function() x
a
a <- function() {x*(x+1)}
a
x <- 7
a <- function() {x*(x+1)}
a
a <- function(x) {x*(x+1)}
a
a <- function(x) x*(x+1)
a
x
a <- function(x)
a
a <- function(appari) x*(x+1)
a
solve <- r
solve
setinv <- function(solve) m <<- solve
x$setinv(m)
x$setinv(x)
x$setinv(d)
debugSource('~/assignment2/ProgrammingAssignment2/cachematrix.R')
q <- cacheSolve(makeCacheMatrix(d))
d
q <- cacheSolve(makeCacheMatrix(d))
q <- cacheSolve(makeCacheMatrix(d))
q
debugSource('~/assignment2/ProgrammingAssignment2/cachematrix.R')
q <- cacheSolve(makeCacheMatrix(d))
?function
makeCacheMatrix()
cacheSolve()
source('~/.active-rstudio-document')
t <- counter_one <- new_counter()
t
counter_one
source('~/.active-rstudio-document')
counter_one
counter_one <- new_counter()
counter_one()
counter_two <- new_counter()
counter_two()
counter_one()
counter_two()
source('~/.active-rstudio-document')
counter_three <- new_counter2()
counter_three()
source('~/.active-rstudio-document')
counter_three <- new_counter2()
counter_three()
counter_four <- new_counter3()
counter_four()
counter_four()
counter_four()
i <- 0
counter_three()
counter_three <- new_counter2()
counter_three()
counter_three
counter_three
counter_three
counter_three
?runif
source('~/.active-rstudio-document')
lapply(compute_mean, function(f) f(x))
m <- NULL
setmean <- function(mean) m <<- mean()
setmean <- function(mean) m <<- mean
setmean
setmean <- function(mean) 3 <<- mean
setmean
setmean <- function(mean) m <<- mean
m <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
setmean(m)
a <- setmean(m)
a
x <- matrix(rnorm(9), 3, 3)
x
z <- makeCacheMatrix(x)
cacheSolve(z)
f <- x$set()
y <- z
f <- x$set()
debugSource('~/assignment2/ProgrammingAssignment2/cachematrix.R')
c <- c(1, 2, 3, 4, 5, 6, 7, 8)
makeCacheMatrix(c)
debugSource('~/assignment2/ProgrammingAssignment2/cachematrix.R')
cacheSolve(z)
a <- x$set
a
b <- x$get
b
makeCacheMatrix(c)
cacheSolve(z)
d <- x$getinv
d
z
e <- x$get
e
makeCacheMatrix
makeCacheMatrix()
cacheSolve()
cacheSolve
cacheSolve(z)
x$getinv
m
s <- matrix(rnomr(16), 4, 4)
s <- matrix(rnorm(16), 4, 4)
makeCacheMatrix(s)
makeCacheMatrix(c)
s <- matrix(rnorm(16), 4, 4)
makeCacheMatrix(s)
cacheSolve(s)
s
cacheSolve(s)
?atomic
is.matrix(s)
class(s)
cacheSolve(makeCacheMatrix(s))
r <- x$get
r
cacheSolve
body(cacheSolve)
m
cacheSolve(makeCacheMatrix(s))
cacheSolve(s)
r <- matrix(rnorm(4), 2, 2)
cacheSolve(r)
makeCacheMatrix(r)
q <- makeCacheMatrix(r)
cacheSolve(q)
cacheSolve(q)
f <- z$getinv
h <- z$set
h
cacheSolve(q)
X <- matrix(3, 3, 3; 4, 4, 4; 5, 5, 5)
X <- matrix(3, 3, 3: 4, 4, 4: 5, 5, 5)
X <- matrix(3, 3, 3 4, 4, 4 5, 5, 5)
X <- matrix(c(3, 3, 3, 4, 4, 4, 5, 5, 5), 3, 3)
X
Q <- makeCacheMatrix(X)
cacheSolve(Q)
X <- matrix(c(1, 2, 3, 4, 5, 6, 7, 8, 9), 3, 3)
Q <- makeCacheMatrix(X)
cacheSolve(Q)
X <- matrix(rnorm(9), 3, 3)
Q <- makeCacheMatrix(X)
cacheSolve(Q)
R <- X
cacheSolve(R)
Q <- makeCacheMatrix(R)
cacheSolve(Q)
Q <- X
cacheSolve(Q)
Q <- makeCacheMatrix(X)
cacheSolve(Q)
cacheSolve(Q)
